name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install TA-Lib dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libta-lib0-dev
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ matrix.python-version }}-

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        cd algostack
        poetry install --no-interaction --no-root

    - name: Install project
      run: |
        cd algostack
        poetry install --no-interaction

    - name: Run Black
      run: |
        cd algostack
        poetry run black --check .

    - name: Run Ruff
      run: |
        cd algostack
        poetry run ruff .

    - name: Run mypy
      run: |
        cd algostack
        poetry run mypy algostack/

    - name: Run tests with coverage
      run: |
        cd algostack
        poetry run pytest -v --cov=algostack --cov-report=term-missing --cov-fail-under=80

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: ./algostack/coverage.xml
        fail_ci_if_error: true